@import '~@blueprintjs/core/src/common/variables';
$font-size-small: 10px;

@mixin span($fg, $bg, $fgDark, $bgDark) {
  .cell {
    stroke: $fg;
    fill: $bg;

    .bp3-dark & {
      stroke: $fgDark;
      fill: $bgDark;
    }
  }

  .label {
    fill: $fg;

    .bp3-dark & {
      fill: $fgDark;
    }
  }
}

.timeline {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;

  .container {
    flex-grow: 1;
  }

  svg {
    width: 100%;
    height: 100%;
    user-select: none;
    shape-rendering: crispEdges;

    font-family: $pt-font-family-monospace;
    font-size: $pt-font-size-small;
  }

  .vx-axis {
    .vx-axis-tick {
      text {
        font-family: $pt-font-family-monospace;
        font-size: $font-size-small;

        .bp3-dark & {
          fill: $pt-dark-text-color;
        }
      }

      .vx-line {
        .bp3-dark & {
          stroke: $pt-dark-text-color;
        }
      }
    }

    .vx-axis-line {
      .bp3-dark & {
        stroke: $pt-dark-text-color;
      }
    }

    &.time-axis-major {
      .vx-axis-tick {
        &:first-of-type {
          text {
            text-anchor: start;
            transform: translateX(4px);
          }
        }

        &:last-of-type {
          text {
            text-anchor: end;
            transform: translateX(-4px);
          }
        }
      }
    }
  }

  .vx-rows,
  .vx-columns {
    .vx-line {
      .bp3-dark & {
        stroke: $dark-gray5;
      }
    }
  }

  .current-time {
    $stroke: rgba($pt-intent-danger, 0.85);
    $text: map-get($pt-intent-text-colors, 'danger');
    $stroke-dark: $stroke;
    $text-dark: map-get($pt-dark-intent-text-colors, 'danger');

    line {
      stroke: $stroke;

      .bp3-dark & {
        stroke: $stroke-dark;
      }
    }

    text {
      fill: $text;
      font-size: $font-size-small;
      dominant-baseline: text-before-edge;

      .bp3-dark & {
        fill: $text-dark;
      }
    }
  }

  .crosshair {
    .horizontal,
    .vertical {
      fill: $light-gray3;
      stroke: $light-gray1;

      .bp3-dark & {
        fill: rgba($gray3, 0.15);
        stroke: rgba($gray3, 0.3);
      }
    }

    .horizontal {
      z-index: 0;
    }

    text {
      fill: $pt-text-color;
      font-size: $font-size-small;

      .bp3-dark & {
        fill: $pt-dark-text-color;
      }
    }
  }

  .current-time,
  .crosshair {
    text {
      $offset: 8px;
      transform: translateX($offset);

      &.near-right {
        text-anchor: end;
        transform: translateX(-$offset);
      }
    }
  }

  .metrics {
    opacity: 0.4;

    .bp3-dark & {
      fill: $pt-dark-text-color;
    }
  }

  .cells {
    .cell {
      transition: opacity 0.1s ease;
    }

    &.has-selection,
    &:hover {
      .cell {
        opacity: 0.2;
      }
    }
  }

  .span {
    cursor: pointer;

    &:hover,
    &.selected {
      .cell {
        opacity: 1;
      }
    }

    .label {
      dominant-baseline: text-after-edge;
    }

    // Default and running state
    @include span(
      $gray3,
      rgba($gray3, 0.15),
      $pt-dark-text-color,
      rgba($gray3, 0.15)
    );

    &.rejected {
      @include span(
        map-get($pt-intent-text-colors, 'danger'),
        rgba($pt-intent-danger, 0.15),
        map-get($pt-dark-intent-text-colors, 'danger'),
        rgba($pt-intent-danger, 0.25)
      );
    }

    &.resolved {
      @include span(
        map-get($pt-intent-text-colors, 'success'),
        rgba($pt-intent-success, 0.15),
        map-get($pt-dark-intent-text-colors, 'success'),
        rgba($pt-intent-success, 0.25)
      );
    }

    &.cancelled {
      @include span(
        map-get($pt-intent-text-colors, 'warning'),
        rgba($pt-intent-warning, 0.15),
        map-get($pt-dark-intent-text-colors, 'warning'),
        rgba($pt-intent-warning, 0.25)
      );
    }
  }
}
