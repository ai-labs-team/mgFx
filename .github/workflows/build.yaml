name: build-and-test

on:
  push:

jobs:
  build-and-test-linux:
    name: Build & Test (Node v${{ matrix.node-version }}, Ubuntu 18.04)

    runs-on: ubuntu-18.04

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mgfx

      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v2
        with:
          # Lerna requires full Git history to accurately bump package versions when publishing; setting fetch-depth to 0 ensures all commits and tags are fetched.
          fetch-depth: 0

      - name: Setup Node v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure Node module cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test

      - name: Publish Packages (Beta Channel)
        if: matrix.node-version == '14.x' && github.ref == 'refs/heads/beta'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_USER: wms
          GIT_EMAIL: warren@fountainhead.tech
        run: |
          git clean -f

          echo "registry=http://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc

          git config --global user.name "$GIT_USER"
          git config --global user.email "$GIT_EMAIL"

          yarn lerna publish --yes --dist-tag beta

      - name: Publish Package
        if: matrix.node-version == '14.x' && github.ref == 'refs/heads/master'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_USER: wms
          GIT_EMAIL: warren@fountainhead.tech
        run: |
          git clean -f

          echo "registry=http://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc

          git config --global user.name "$GIT_USER"
          git config --global user.email "$GIT_EMAIL"

          yarn lerna publish --yes

      # Source: https://github.com/marketplace/actions/build-and-push-docker-images#complete-workflow
      - name: Generate analyzer-kit metadata
        id: analyzer-kit
        if: matrix.node-version == '14.x'
        run: |
          DOCKER_IMAGE=mgfx/analyzer-kit
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up Docker Buildx
        if: matrix.node-version == '14.x'
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: matrix.node-version == '14.x'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: matrix.node-version == '14.x'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: matrix.node-version == '14.x'
        uses: docker/build-push-action@v2
        with:
          context: ./packages/analyzer-kit
          file: ./packages/analyzer-kit/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.analyzer-kit.outputs.tags }}
          labels: |
            org.opencontainers.image.title=mgFx Analyzer Kit
            org.opencontainers.image.description=Self-contained Analyzer service for mgFx applications
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.analyzer-kit.outputs.version }}
            org.opencontainers.image.created=${{ steps.analyzer-kit.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

      - name: Make analyzer-gui .deb
        if: matrix.node-version == '14.x'
        run: yarn make:deb
        working-directory: packages/analyzer-gui

      - name: Upload analyzer-gui .deb
        if: matrix.node-version == '14.x'
        uses: actions/upload-artifact@v2
        with:
          name: analyzer-gui-deb
          path: packages/analyzer-gui/out/make/deb/x64/*.deb

  build-macos:
    name: Build (Node v${{ matrix.node-version }}, MacOS)

    runs-on: macos-10.15

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure Node module cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}

      # https://github.com/yarnpkg/yarn/issues/8242#issuecomment-661881292
      - name: Extend yarn network timeout
        run: yarn config set network-timeout 30000

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Make analyzer-gui .dmg
        if: matrix.node-version == '14.x'
        run: yarn make:dmg
        working-directory: packages/analyzer-gui

      - name: Upload analyzer-gui .dmg
        if: matrix.node-version == '14.x'
        uses: actions/upload-artifact@v2
        with:
          name: analyzer-gui-dmg
          path: packages/analyzer-gui/out/make/*.dmg
